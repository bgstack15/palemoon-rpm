#!/bin/bash

# DETERMINE LOCATION OF FRAMEWORK
while read flocation; do if test -x ${flocation} && test "$( ${flocation} --fcheck )" -ge 20170111; then frameworkscript="${flocation}"; break; fi; done <<EOFLOCATIONS
/usr/share/bgscripts/framework.sh
EOFLOCATIONS
test -z "${frameworkscript}" && echo "$0: framework not found. Aborted." 1>&2 && exit 4

. ${frameworkscript} || echo "$0: framework did not run properly. Continuing..." 1>&2

type="";

case "${thisflavor}" in
   redhat|rhel|centos|fedora|korora) type=rpm;;
   debian|ubuntu) type=dpkg;;
   *) type=targz;;
esac

echo " $@ " | grep -qiE -- "help|usage|\s-h\s|\s-\?" 1>/dev/null 2>&1 && {
   # display help and exit
   less -F <<EOF
pack utility version 2018-01-25a palemoon
usage: pack [ rpm | deb | tar | scrub ] [ --debug | -d {0-10} ]
Provides a single command for building a package. This script is customized to each package.
optional arguments:
 [ rpm | deb | tar | scrub ]    Build that type of package. Scrub calls the scrub.py script.
                                The default depends on the local os flavor. This system is "${thisflavor}"
 [ --debug {0-10} | -d {0-10} ] Display package type to build and exit. Debuglev not implemented here.
EOF
exit 1
}

# Derive package name and version number, for my simple package versions only.
fullname="$( pwd | sed -r -e 's/.*(SOURCES|deb)\///;s/\/.*//;' )" 
version="$( echo "${fullname}" | grep -oiE -- "-[0-9]{0,3}(\.[0-9a-zA-Z]{0,5})+-[0-9]{0,4}" | sed -e 's/^-//;' )"
shortversion="$( echo "${version}" | sed -r -e 's/-.+$//;' )"
package="$( echo "${fullname}" | sed -e "s/-${version}//;" )"

set | grep -E '^(version|shortversion|fullname|package)=' 1>&2
#exit 5

echo " $@ " | grep -qiE -- "rpm|rhel|redhat|centos|fedora|korora" 1>/dev/null 2>&1 && type=rpm
echo " $@ " | grep -qiE -- "debian|ubuntu|devuan|deb\s|dpkg" 1>/dev/null 2>&1 && type=dpkg
echo " $@ " | grep -qiE -- "tar|tgz|gz" 1>/dev/null 2>&1 && type=targz
echo " $@ " | grep -qiE -- "scrub" 1>/dev/null 2>&1 && type=scrub

# Display information
echo "packaging ${package}-${version} as ${type}"
echo " $@ " | grep -qiE -- "debug|\s-d[ 0-9]{0,3}\s" 1>/dev/null 2>&1 && exit 0

case "${type}" in
   rpm)

### PACKAGING for rhel/centos/fedora
# if you copy-paste this, be sure to define package, version, shortversion
rpmbuilddir=~/rpmbuild
packagespecfile="${package}-${version}/usr/share/${package}/build/${package}.spec"
. "${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/build/get-sources"
sed -n -e '1,/^\%files$/p;' "${rpmbuilddir}/SOURCES/${packagespecfile}" > "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp" # removes files and changelog
cd "${rpmbuilddir}/SOURCES/${package}-${version}"
# custom for PM:
mkdir "${rpmbuilddir}/SOURCES/usr/share/${package}/app" "${rpmbuilddir}/SOURCES/usr/share/${package}/source" 2>/dev/null
"${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/build/get-files" rpm >> "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp"
{ printf '\n'; sed -n -e '/^\%changelog/,$p' "${rpmbuilddir}/SOURCES/${packagespecfile}" ; } >> "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp"
mv -f "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp" "${rpmbuilddir}/SOURCES/${packagespecfile}"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}"; cp -prf "${rpmbuilddir}/SOURCES/${package}-${version}" "${rpmbuilddir}/SOURCES/${package}-${shortversion}"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}/DEBIAN"
cd "${rpmbuilddir}/SOURCES"
rm -rf "${package}.tgz"; tar -zc --exclude='.git*' --exclude='./README.md' -f "${package}.tgz" "${package}-${shortversion}"
cp -p "${rpmbuilddir}/SOURCES/${packagespecfile}" "${rpmbuilddir}/SPECS"
mkdir -p "${rpmbuilddir}/RPMS/x86_64"; cd "${rpmbuilddir}/RPMS/x86_64"
rpmbuild -bb "${rpmbuilddir}/SPECS/${package}.spec"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}/" "${rpmbuilddir}/SOURCES/${package}.tgz"

      ;;
   dpkg)

########## PACKAGING for ubuntu
# You need package dpkg-dev to build packages.
# if you copy-paste this, be sure to define package, version
debdir=~/deb
echo "Gotta say unh. Deb format for ${package} has not yet been implemented. Aborted."
exit 1

      ;;
   targz)

########## PACKAGING in a master.tgz
# if you copy-paste this, be sure to define package, version
cd ~/deb 2>/dev/null || cd ~/rpmbuild/SOURCES
rm -rf ./"${package}-${version}".master.tgz
tar -zcf "${package}-${version}".master.tgz "${package}-${version}"/

      ;;
   scrub)

########## SCRUB for publication
# if you copy-paste this, be sure to define package, version
cd ~/deb 2>/dev/null || cd ~/rpmbuild/SOURCES
cd "$( find . -name "*scrub.txt" | grep -iE "${package}-${version}\/" | xargs dirname )"
/usr/share/bgscripts/scrub.py

      ;;
   unknown)
      echo "error: check $0 for errors on type ${type}." 1>&2
      ;;
esac
